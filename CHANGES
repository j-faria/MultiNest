These are the changes from default MultiNest v3.7



From 55bfb54dca6b8529ec2435fa330a5ffc11617dde Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Faria?= <joao.faria@astro.up.pt>
Date: Mon, 21 Jul 2014 17:51:24 +0100
Subject: [PATCH] adding GCC compilers and MPI options in makefile

---
 MultiNest_v3.7/Makefile | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/MultiNest_v3.7/Makefile b/MultiNest_v3.7/Makefile
index f62882c..b5f1631 100644
--- a/MultiNest_v3.7/Makefile
+++ b/MultiNest_v3.7/Makefile
@@ -4,6 +4,24 @@ CXX = icpc -lmpi
 FFLAGS += -O3 -DMPI
 CFLAGS += -O3 -DMPI
 
+FC = gfortran
+#FCPATH = 
+CC = gcc
+CXX = g++
+FFLAGS += -I. -O3 -w -Wno-unused-parameter -fPIC -ffree-line-length-none
+CFLAGS += -I. -O3 -std=c99 -Wall -Wextra -Wno-unused-parameter -fPIC
+
+ifndef WITHOUT_MPI
+# compiling with MPI support. You can disable this with
+# $ make WITHOUT_MPI=1
+FC = mpif90
+CC = mpicc
+CXX = mpic++
+FFLAGS += -DMPI -lmpi #-f90=${FCPATH}
+CFLAGS += -DMPI
+endif
+
+
 LAPACKLIB = -llapack
 
 NESTLIBDIR = ./
-- 
2.0.1


###########################################################################
###########################################################################

From c6f390f70302c56d04cf105de996f89fd878ebb5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Faria?= <joao.faria@astro.up.pt>
Date: Mon, 21 Jul 2014 19:14:37 +0100
Subject: [PATCH] add new priors

---
 MultiNest_v3.7/priors.f90 | 243 ++++++++++++++++++++++++++--------------------
 1 file changed, 140 insertions(+), 103 deletions(-)

diff --git a/MultiNest_v3.7/priors.f90 b/MultiNest_v3.7/priors.f90
index 3c8cd4d..e042dae 100644
--- a/MultiNest_v3.7/priors.f90
+++ b/MultiNest_v3.7/priors.f90
@@ -1,6 +1,6 @@
 module priors
 
-	use utils1
+      use utils1
 
 contains
 
@@ -13,11 +13,11 @@ contains
 
 function DeltaFunctionPrior(r,x1,x2)
 
-	implicit none
+      implicit none
 
-	double precision r,x1,x2,DeltaFunctionPrior
+      double precision r,x1,x2,DeltaFunctionPrior
 
-	DeltaFunctionPrior=x1
+      DeltaFunctionPrior=x1
       
 end function DeltaFunctionPrior
 
@@ -26,11 +26,11 @@ end function DeltaFunctionPrior
 
 function UniformPrior(r,x1,x2)
 
-      	implicit none
+            implicit none
 
-      	double precision r,x1,x2,UniformPrior
+            double precision r,x1,x2,UniformPrior
 
-      	UniformPrior=x1+r*(x2-x1)
+            UniformPrior=x1+r*(x2-x1)
 
 end function UniformPrior
 
@@ -39,35 +39,72 @@ end function UniformPrior
 
 function LogPrior(r,x1,x2)
 
-      	implicit none
+            implicit none
 
-      	double precision r,x1,x2,LogPrior
-      	double precision lx1,lx2
+            double precision r,x1,x2,LogPrior
+            double precision lx1,lx2
 
-      	if (r.le.0.0d0) then
-       		LogPrior=-1.0d32
-      	else
-      	 	lx1=dlog10(x1)
-       		lx2=dlog10(x2)
-       		LogPrior=10.d0**(lx1+r*(lx2-lx1))
-      	endif
+            if (r.le.0.0d0) then
+                  LogPrior=-1.0d32
+            else
+                  lx1=dlog10(x1)
+                  lx2=dlog10(x2)
+                  LogPrior=10.d0**(lx1+r*(lx2-lx1))
+            endif
       
 end function LogPrior
 
 !=======================================================================
+! Uniform[0:1]  ->  Exponential[0:inf]
+
+function ExpPrior(r)
+
+            implicit none
+
+            double precision r,ExpPrior
+            
+            ExpPrior=-log(1.d0-r)
+
+end function ExpPrior
+
+!=======================================================================
+! Uniform[0:1]  ->  Jeffreys[x1:x2]
+function JeffreysPrior(r, x1, x2)
+
+            implicit none
+
+            double precision r,x1,x2,JeffreysPrior
+
+            JeffreysPrior=x1*(x2/x1)**r
+            
+end function JeffreysPrior
+
+!=======================================================================
+! Uniform[0:1]  ->  Mod. Jeffreys[x1:x2]
+function ModJeffreysPrior(r, x1, x2)
+
+            implicit none
+
+            double precision r, x1, x2, ModJeffreysPrior
+
+            ModJeffreysPrior=x1*((1.d0+x2/x1)**r - 1.d0)
+
+end function ModJeffreysPrior
+
+!=======================================================================
 ! Uniform[0:1]  ->  Sin[x1:x2]  (angles in degrees):
 
 function SinPrior(r,x1,x2)
 
-      	implicit none
+            implicit none
 
-      	double precision r,x1,x2,SinPrior
-      	real cx1,cx2,deg2rad
-      	parameter(deg2rad=0.017453292)
+            double precision r,x1,x2,SinPrior
+            real cx1,cx2,deg2rad
+            parameter(deg2rad=0.017453292)
 
-      	cx1=cos(x1*deg2rad)
-      	cx2=cos(x2*deg2rad)
-      	SinPrior=1.d0*acos(cx1+r*(cx2-cx1))
+            cx1=cos(x1*deg2rad)
+            cx2=cos(x2*deg2rad)
+            SinPrior=1.d0*acos(cx1+r*(cx2-cx1))
 
 end function SinPrior
 
@@ -76,13 +113,13 @@ end function SinPrior
 
 function CauchyPrior(r,x0,gamma)
 
-      	implicit none
+            implicit none
 
-      	double precision r,x0,gamma,CauchyPrior
-      	real Pi
-      	parameter(Pi=3.141592654)
+            double precision r,x0,gamma,CauchyPrior
+            real Pi
+            parameter(Pi=3.141592654)
 
-      	CauchyPrior=x0+gamma*tan(Pi*(r-0.5))
+            CauchyPrior=x0+gamma*tan(Pi*(r-0.5))
 
 end function CauchyPrior
 
@@ -91,17 +128,17 @@ end function CauchyPrior
 
 function GaussianPrior(r,mu,sigma)
 
-      	implicit none
+            implicit none
 
-      	double precision r,mu,sigma,GaussianPrior
-      	double precision SqrtTwo
-      	parameter(SqrtTwo=1.414213562d0)
+            double precision r,mu,sigma,GaussianPrior
+            double precision SqrtTwo
+            parameter(SqrtTwo=1.414213562d0)
 
-      	if (r.le.1.0d-16.or.(1.0d0-r).le.1.0d-16) then
-		GaussianPrior=-1.0d32
-      	else
-		GaussianPrior=mu+sigma*SqrtTwo*dierfc(2.d0*(1.d0-r))
-      	endif
+            if (r.le.1.0d-16.or.(1.0d0-r).le.1.0d-16) then
+            GaussianPrior=-1.0d32
+            else
+            GaussianPrior=mu+sigma*SqrtTwo*dierfc(2.d0*(1.d0-r))
+            endif
       
 end function GaussianPrior
 
@@ -111,14 +148,14 @@ end function GaussianPrior
 
 function LogNormalPrior(r,a,sigma)
 
-      	implicit none
+            implicit none
 
-      	double precision r,a,sigma,LogNormalPrior
-      	double precision SqrtTwo,bracket
-      	parameter(SqrtTwo=1.414213562d0)
+            double precision r,a,sigma,LogNormalPrior
+            double precision SqrtTwo,bracket
+            parameter(SqrtTwo=1.414213562d0)
 
-      	bracket=sigma*sigma+sigma*SqrtTwo*dierfc(2.d0*r)
-      	LogNormalPrior=a*dexp(bracket)
+            bracket=sigma*sigma+sigma*SqrtTwo*dierfc(2.d0*r)
+            LogNormalPrior=a*dexp(bracket)
 
 end function LogNormalPrior
 
@@ -127,65 +164,65 @@ end function LogNormalPrior
 
 function dierfc(y)
 
-	implicit none
-      	double precision y,dierfc
-      	double precision qa,qb,qc,qd,q0,q1,q2,q3,q4,pa,pb,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18
-      	double precision p19,p20,p21,p22,x,z,w,u,s,t
-      	double precision infinity
-      	parameter (infinity=5.0d0)
-      	parameter (qa=9.16461398268964d-01, &
-      	qb=2.31729200323405d-01, &
-      	qc=4.88826640273108d-01, &
-      	qd=1.24610454613712d-01, &
-      	q0=4.99999303439796d-01, &
-      	q1=1.16065025341614d-01, &
-      	q2=1.50689047360223d-01, &
-      	q3=2.69999308670029d-01, &
-      	q4=-7.28846765585675d-02)
-      	parameter (pa=3.97886080735226000d+00, &
-      	pb=1.20782237635245222d-01, &
-      	p0=2.44044510593190935d-01, &
-      	p1=4.34397492331430115d-01, &
-      	p2=6.86265948274097816d-01, &
-      	p3=9.56464974744799006d-01, &
-      	p4=1.16374581931560831d+00, &
-      	p5=1.21448730779995237d+00, &
-      	p6=1.05375024970847138d+00, &
-      	p7=7.13657635868730364d-01, &
-      	p8=3.16847638520135944d-01, &
-      	p9=1.47297938331485121d-02, &
-      	p10=-1.05872177941595488d-01, &
-      	p11=-7.43424357241784861d-02)
-      	parameter (p12=2.20995927012179067d-03, &
-      	p13=3.46494207789099922d-02, &
-      	p14=1.42961988697898018d-02, &
-      	p15=-1.18598117047771104d-02, &
-      	p16=-1.12749169332504870d-02, &
-      	p17=3.39721910367775861d-03, &
-      	p18=6.85649426074558612d-03, &
-      	p19=-7.71708358954120939d-04, &
-      	p20=-3.51287146129100025d-03, &
-      	p21=1.05739299623423047d-04, &
-      	p22=1.12648096188977922d-03)
-      	if (y==0.0) then
-        	dierfc=infinity
-		return
-      	endif  
-      	z=y
-      	if (y .gt. 1) z=2-y
-      	w=qa-log(z)
-      	u=sqrt(w)
-      	s=(qc+log(u))/w
-      	t=1/(u+qb)
-      	x=u*(1-s*(0.5d0+s*qd))-((((q4*t+q3)*t+q2)*t+q1)*t+q0)*t
-      	t=pa/(pa+x)
-      	u=t-0.5d0
-      	s=(((((((((p22*u+p21)*u+p20)*u+p19)*u+p18)*u+p17)*u+p16)*u+p15)*u+p14)*u+p13)*u+p12
-      	s=((((((((((((s*u+p11)*u+p10)*u+p9)*u+p8)*u+p7)*u+p6)*u+p5)*u+p4)*u+p3)*u+p2) &
-      	*u+p1)*u+p0)*t-z*exp(x*x-pb)
-      	x=x+s*(1+x*s)
-      	if (y .gt. 1) x=-x
-      	dierfc=x
+      implicit none
+            double precision y,dierfc
+            double precision qa,qb,qc,qd,q0,q1,q2,q3,q4,pa,pb,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14,p15,p16,p17,p18
+            double precision p19,p20,p21,p22,x,z,w,u,s,t
+            double precision infinity
+            parameter (infinity=5.0d0)
+            parameter (qa=9.16461398268964d-01, &
+            qb=2.31729200323405d-01, &
+            qc=4.88826640273108d-01, &
+            qd=1.24610454613712d-01, &
+            q0=4.99999303439796d-01, &
+            q1=1.16065025341614d-01, &
+            q2=1.50689047360223d-01, &
+            q3=2.69999308670029d-01, &
+            q4=-7.28846765585675d-02)
+            parameter (pa=3.97886080735226000d+00, &
+            pb=1.20782237635245222d-01, &
+            p0=2.44044510593190935d-01, &
+            p1=4.34397492331430115d-01, &
+            p2=6.86265948274097816d-01, &
+            p3=9.56464974744799006d-01, &
+            p4=1.16374581931560831d+00, &
+            p5=1.21448730779995237d+00, &
+            p6=1.05375024970847138d+00, &
+            p7=7.13657635868730364d-01, &
+            p8=3.16847638520135944d-01, &
+            p9=1.47297938331485121d-02, &
+            p10=-1.05872177941595488d-01, &
+            p11=-7.43424357241784861d-02)
+            parameter (p12=2.20995927012179067d-03, &
+            p13=3.46494207789099922d-02, &
+            p14=1.42961988697898018d-02, &
+            p15=-1.18598117047771104d-02, &
+            p16=-1.12749169332504870d-02, &
+            p17=3.39721910367775861d-03, &
+            p18=6.85649426074558612d-03, &
+            p19=-7.71708358954120939d-04, &
+            p20=-3.51287146129100025d-03, &
+            p21=1.05739299623423047d-04, &
+            p22=1.12648096188977922d-03)
+            if (y==0.0) then
+            dierfc=infinity
+            return
+            endif  
+            z=y
+            if (y .gt. 1) z=2-y
+            w=qa-log(z)
+            u=sqrt(w)
+            s=(qc+log(u))/w
+            t=1/(u+qb)
+            x=u*(1-s*(0.5d0+s*qd))-((((q4*t+q3)*t+q2)*t+q1)*t+q0)*t
+            t=pa/(pa+x)
+            u=t-0.5d0
+            s=(((((((((p22*u+p21)*u+p20)*u+p19)*u+p18)*u+p17)*u+p16)*u+p15)*u+p14)*u+p13)*u+p12
+            s=((((((((((((s*u+p11)*u+p10)*u+p9)*u+p8)*u+p7)*u+p6)*u+p5)*u+p4)*u+p3)*u+p2) &
+            *u+p1)*u+p0)*t-z*exp(x*x-pb)
+            x=x+s*(1+x*s)
+            if (y .gt. 1) x=-x
+            dierfc=x
       
 end function dierfc
 
-- 
2.0.1

